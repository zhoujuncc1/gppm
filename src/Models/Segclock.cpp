/*
 * Segclock.cpp
 *
 *  Created on: 7 Nov 2016
 *      Author: zhoujun
 */

#include"../../include/Model.h"
#include<string>


const int Model::N_SPECIES = 16;
const int Model::N_PARAMS = 71;
const double Model::end_time = 250.0;
const double Model::x_variation = 0.05;

const double Model::x[Model::N_SPECIES] = {0.5, 0.2, 0, 0.1, 0.001, 0.1, 0.001, 0.1, 3, 0.1, 0.1, 0.5, 0.2, 0.1, 0.1,
                                           0.1};


const double Model::p[Model::N_PARAMS] = {1.4, 0.23, 2.82, 0.001, 0.01, 0.1, 0.1, 0.001, 0.1, 0.768, 2.5, 0.0000, 3,
                                          1.92, 0.05, 0.37,
                                          0.39, 0.3, 0, 0.087, 7.062, 0.06, 1.64, 0.8, 0.7, 0.05, 0.48, 2, 2, 0.5, 0.02,
                                          0.6, 0.63, 0.1,
                                          1.8, 0.28, 0.03, 0.7, 1.5, 0.5, 2, 0.5, 1.35, 0.5, 0.103, 0.1, 0.05, 0.05,
                                          0.05, 0.5, 0.5,
                                          0.05, 0.5, 0.5, 2, 2, 3.45, 2, 2, 0.3, 1.5, 0.3, 0.9, 0.5, 5.08, 1, 4.968,
                                          0.41, 3.3, 1.6, 0.5};


void Model::odefun(const state_type &x, state_type &dxdt, const double t) {
    dxdt[0] = +(1 * p[59] * p[1]) - (p[59] * 1 * p[2] * x[0] / (p[0] + x[0])) -
              (p[59] * 1 * p[56] * x[0] * pow(p[49], p[57]) / (pow(p[49], p[57]) + pow(x[4], p[57])));
    dxdt[1] = +(p[59] * 1 * p[56] * x[0] * pow(p[49], p[57]) / (pow(p[49], p[57]) + pow(x[4], p[57]))) -
              (p[59] * 1 * p[4] * x[1] / (p[3] + x[1])) - (p[59] * 1 * (p[5] * x[1] - p[6] * x[2]));
    dxdt[2] = +(p[59] * 1 * (p[5] * x[1] - p[6] * x[2])) - (p[59] * 1 * p[8] * x[2] / (p[7] + x[2]));
    dxdt[3] = +(p[59] * 1 * p[12] * (p[10] / (p[10] + x[8])) * pow(x[2], p[58]) /
                (pow(p[14], p[58]) + pow(x[2], p[58]))) - (p[59] * 1 * p[13] * x[3] / (p[9] + x[3]));
    dxdt[4] = +(p[59] * 1 * p[17] * x[3]) - (p[59] * 1 * p[16] * x[4] / (p[15] + x[4]));
    dxdt[5] = +(p[60] * 1 * p[64] * p[50] / (p[50] + 2) * x[9] / (p[35] + x[9]) * (3 - x[8]) / 3) -
              (p[60] * 1 * p[65] * x[5] / (p[36] + x[5])) - (p[60] * 1 * p[20] * x[5]);
    dxdt[6] = -(p[60] * 1 * (p[38] * x[6] - p[37] * x[9]));
    dxdt[7] = +(p[60] * 1 * (p[33] * (3 - x[8]) - p[34] * x[7] * x[8])) + (p[60] * 1 * p[30] * x[10]) -
              (p[60] * 1 * p[31] * x[7] / (p[32] + x[7]));
    dxdt[8] = +(p[60] * 1 * (p[33] * (3 - x[8]) - p[34] * x[7] * x[8]));
    dxdt[9] = +(p[60] * 1 * p[19]) - (p[60] * 1 * p[18] * x[9]) -
              (p[60] * 1 * p[64] * p[50] / (p[50] + 2) * x[9] / (p[35] + x[9]) * (3 - x[8]) / 3) +
              (p[60] * 1 * p[65] * x[5] / (p[36] + x[5])) + (p[60] * 1 * (p[38] * x[6] - p[37] * x[9]));
    dxdt[10] =
            +(p[60] * 1 * p[21]) + (p[60] * 1 * (p[22] * pow(x[6], p[27]) / (pow(p[24], p[27]) + pow(x[6], p[27])))) +
            (p[60] * 1 * (p[29] * pow(x[13], p[28]) / (pow(p[25], p[28]) + pow(x[13], p[28])))) -
            (p[60] * 1 * p[23] * x[10] / (p[26] + x[10]));
    dxdt[11] = +(p[61] * 1 * p[66] * pow(1, p[55]) / (pow(p[43], p[55]) + pow(1, p[55])) * (2 - x[11]) /
                 (p[44] + (2 - x[11]))) - (p[61] * 1 * p[67] * x[11] / (p[45] + x[11]));
    dxdt[12] = +(p[61] * 1 * p[68] * x[11] / 2 * (2 - x[12]) / (p[47] + (2 - x[12]))) -
               (p[61] * 1 * p[42] * x[15] * x[12] / (p[46] + x[12]));
    dxdt[13] = +(p[61] * 1 * p[69] * x[12] / 2 * (2 - x[13]) / (p[48] + (2 - x[13]))) -
               (p[61] * 1 * p[70] * x[13] / (p[51] + x[13]));
    dxdt[14] = +(p[61] * 1 * p[62] * pow(x[13], p[54]) / (pow(p[52], p[54]) + pow(x[13], p[54]))) -
               (p[61] * 1 * p[63] * x[14] / (p[53] + x[14]));
    dxdt[15] = +(p[61] * 1 * p[39] * x[14]) - (p[61] * 1 * p[40] * x[15] / (p[41] + x[15]));
}

